{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedTodoId","selectTodo","className","map","todo","id","classNames","completed","title","type","onClick","TodoFilter","onStatusChanged","status","query","onQueryChange","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","users","setUsers","loadUsers","useCallback","a","userId","dataUsers","useEffect","href","email","name","App","setTodos","isLoadTodos","setIsLoadTodos","todoId","setTodoId","setStatus","setQuery","loadTodos","dataTodos","getCheckQuery","str","toUpperCase","includes","trim","filteredTodos","useMemo","filter","todoID","find","ReactDOM","render","document","getElementById"],"mappings":"4RAUaA,EAA4BC,IAAMC,MAC7C,YAA4C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WACxB,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OACRF,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BE,EAAKC,KACnC,oBAAIH,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAWI,IACZ,CAAE,eAAgBF,EAAKG,kBAK7B,oBAAIL,UAAU,2BAAd,SACE,mBAAGA,UAAWI,IACZF,EAAKG,UACD,mBACA,mBAHN,SAMGH,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SAEIF,IAAmBI,EAAKC,GAEpB,wBACE,UAAQ,eACRH,UAAU,SACVO,KAAK,SACLC,QAAS,kBAAMT,EAAW,IAJ5B,SAME,sBAAMC,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAIjB,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,kBAAMT,EAAWG,EAAKC,KAJjC,SAME,sBAAMH,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBA3CpBE,EAAKC,eCvBXM,EAA8Bd,IAAMC,MAC/C,YAKO,IAJLc,EAII,EAJJA,gBACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,MACAC,EACI,EADJA,cAgBA,OACE,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOH,EACPI,SArBiB,SACzBC,GAEAN,EAAgBM,EAAMC,OAAOH,QAevB,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGd,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACVkB,YAAY,YACZJ,MAAOF,EACPG,SA/BkB,SAACC,GACzBH,EAAcG,EAAMC,OAAOH,UAgCvB,sBAAMd,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdY,GACC,sBAAMZ,UAAU,gBAAgBmB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRb,KAAK,SACLP,UAAU,SACVQ,QAxCQ,WAClBK,EAAc,kBCxBPQ,G,MAAmB,kBAC9B,qBAAKrB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAASsB,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICbMC,EAA6BtC,IAAMC,MAC9C,YAGO,IAFLM,EAEI,EAFJA,KACAgC,EACI,EADJA,QAEA,EAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAYC,sBAAW,sBAAC,4BAAAC,EAAA,sEDQVC,ECPa,OAACvC,QAAD,IAACA,OAAD,EAACA,EAAMuC,ODODnB,EAAG,iBAAiBmB,ICR7B,OACtBC,EADsB,OAG5BL,EAASK,GAHmB,iCDQX,IAACD,ICRU,OAI3B,IAMH,OAJAE,qBAAU,WACRL,MACC,IAGD,sBAAKtC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEboC,EAGA,sBAAKpC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYE,QAJZ,IAIYA,OAJZ,EAIYA,EAAMC,MAIlB,wBACEI,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAAS0B,OAIb,sBAAKlC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGE,QADH,IACGA,OADH,EACGA,EAAMI,QAGT,oBAAGN,UAAU,QAAQ,UAAQ,aAA7B,UACO,OAAJE,QAAI,IAAJA,KAAMG,UACL,wBAAQL,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAG4C,KAAI,iBAAYR,EAAMS,OAAzB,SACGT,EAAMU,gBAnCf,cAAC,EAAD,UChBGC,EAAgB,WAC3B,MAA0BZ,mBAAiB,IAA3C,mBAAOtC,EAAP,KAAcmD,EAAd,KACA,EAAsCb,oBAAS,GAA/C,mBAAOc,EAAP,KAAoBC,EAApB,KACA,EAA4Bf,mBAAS,GAArC,mBAAOgB,EAAP,KAAeC,EAAf,KACA,EAA4BjB,mBAAS,OAArC,mBAAOxB,EAAP,KAAe0C,EAAf,KACA,EAA0BlB,mBAAS,IAAnC,mBAAOvB,EAAP,KAAc0C,EAAd,KAEMC,EAAYhB,sBAAW,sBAAC,4BAAAC,EAAA,sEFAFlB,EAAY,UEAV,OACtBkC,EADsB,OAG5BR,EAASQ,GACTN,GAAe,GAJa,2CAK3B,IAEHP,qBAAU,WACRY,MACC,IAEH,IAAME,EAAgBlB,uBAAY,SAACmB,GACjC,OAAOA,EAAIC,cAAcC,SAAShD,EAAM+C,cAAcE,UACrD,CAACjD,IAEEkD,EAAgBC,mBAAQ,WAC5B,OAAOlE,EAAMmE,QAAO,SAAC9D,GACnB,MAAe,WAAXS,GACMT,EAAKG,WAAaoD,EAAcvD,EAAKI,OAGhC,cAAXK,EACKT,EAAKG,WAAaoD,EAAcvD,EAAKI,OAGvCmD,EAAcvD,EAAKI,YAE3B,CAACT,EAAOe,EAAOD,IAElB,OACE,qCACE,qBAAKX,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAACS,EAAD,CACEE,OAAQA,EACRC,MAAOA,EACPC,cAAeyC,EACf5C,gBAAiB2C,MAIrB,qBAAKrD,UAAU,QAAf,SAEIiD,EAEI,cAACvD,EAAD,CACEG,MAAOiE,EACPhE,eAAgBqD,EAChBpD,WAAY,SAACkE,GACXb,EAAUa,MAId,cAAC,EAAD,aAOF,IAAXd,GACC,cAAClB,EAAD,CACE/B,KAAM,YAAIL,GAAOqE,MAAK,SAAAhE,GAAI,OAAIA,EAAKC,KAAOgD,KAC1CjB,QAAS,kBAAMkB,EAAU,UCxFnCe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.67ea2267.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  selectTodo: (value: number) => void\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todos, selectedTodoId, selectTodo }) => {\n    return (\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                <span className=\"icon\">\n                  <i className={classNames(\n                    { 'fas fa-check': todo.completed },\n                  )}\n                  />\n                </span>\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger',\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                {\n                  selectedTodoId === todo.id\n                    ? (\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => selectTodo(0)}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye-slash\" />\n                        </span>\n                      </button>\n                    ) : (\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => selectTodo(todo.id)}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye\" />\n                        </span>\n                      </button>\n                    )\n                }\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","import React from 'react';\n\ntype Props = {\n  onStatusChanged: (e: string) => void,\n  onQueryChange: (e: string) => void,\n  status: string,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    onStatusChanged,\n    status,\n    query,\n    onQueryChange,\n  }) => {\n    const handleStatusChange = (\n      event: React.ChangeEvent<HTMLSelectElement>,\n    ) => {\n      onStatusChanged(event.target.value);\n    };\n\n    const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      onQueryChange(event.target.value);\n    };\n\n    const clearButton = () => {\n      onQueryChange('');\n    };\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={status}\n              onChange={handleStatusChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {query && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={clearButton}\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo | undefined,\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(\n  ({\n    todo,\n    onClose,\n  }) => {\n    const [users, setUsers] = useState<User>();\n\n    const loadUsers = useCallback(async () => {\n      const dataUsers = await getUser(todo?.userId as number);\n\n      setUsers(dataUsers);\n    }, []);\n\n    useEffect(() => {\n      loadUsers();\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {!users ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${users.email}`}>\n                  {users.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n\n      </div>\n    );\n  },\n);\n","/* eslint-disable max-len */\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoadTodos, setIsLoadTodos] = useState(false);\n  const [todoId, setTodoId] = useState(0);\n  const [status, setStatus] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const loadTodos = useCallback(async () => {\n    const dataTodos = await getTodos();\n\n    setTodos(dataTodos);\n    setIsLoadTodos(true);\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const getCheckQuery = useCallback((str: string) => {\n    return str.toUpperCase().includes(query.toUpperCase().trim());\n  }, [query]);\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter((todo) => {\n      if (status === 'active') {\n        return !todo.completed && getCheckQuery(todo.title);\n      }\n\n      if (status === 'completed') {\n        return todo.completed && getCheckQuery(todo.title);\n      }\n\n      return getCheckQuery(todo.title);\n    });\n  }, [todos, query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={status}\n                query={query}\n                onQueryChange={setQuery}\n                onStatusChanged={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoadTodos\n                  ? (\n                    <TodoList\n                      todos={filteredTodos}\n                      selectedTodoId={todoId}\n                      selectTodo={(todoID: number) => {\n                        setTodoId(todoID);\n                      }}\n                    />\n                  )\n                  : <Loader />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoId !== 0 && (\n        <TodoModal\n          todo={[...todos].find(todo => todo.id === todoId)}\n          onClose={() => setTodoId(0)}\n        />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}